{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#tylerjl","title":"Tyler.jl","text":"<p>A package for downloading map tiles on demand from different data source providers.</p> <p>Info</p> <ul> <li>This package is currently in the initial phase of development.</li> </ul> <p></p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>In the Julia REPL type:</p> <pre><code>using Pkg\nPkg.add([\"https://github.com/JuliaGeo/TileProviders.jl\", \"https://github.com/JuliaGeo/MapTiles.jl\", \"https://github.com/MakieOrg/Tyler.jl.git\"])\n</code></pre> <p>or</p> <pre><code>] add https://github.com/JuliaGeo/TileProviders.jl https://github.com/JuliaGeo/MapTiles.jl https://github.com/MakieOrg/Tyler.jl.git\n</code></pre> <p>The <code>]</code> character starts the Julia package manager. Hit backspace key to return to Julia prompt.</p>"},{"location":"examples/generated/Contributors/Howto/","title":"Contribute to Documentation","text":""},{"location":"examples/generated/Contributors/Howto/#contribute-to-documentation","title":"Contribute to Documentation","text":"<p>Contributing with examples can be done by first creating a new file example here</p> <p>Info</p> <ul> <li><code>your_new_file.jl</code> at <code>docs/examples/UserGuide/</code></li> </ul> <p>Once this is done you need to add a new entry here at the bottom and the appropiate level.</p> <p>Info</p> <p>Your new entry should look like:</p> <ul> <li><code>\"Your title example\" : \"examples/generated/UserGuide/your_new_file.md\"</code></li> </ul> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/basic_features/","title":"Basic features: scatter, polygon and text","text":""},{"location":"examples/generated/UserGuide/basic_features/#basic-features-example","title":"Basic features example","text":""},{"location":"examples/generated/UserGuide/basic_features/#add-points-polygons-and-text-to-a-map","title":"Add points, polygons and text to a map","text":"<p>load packages</p> <pre><code>using Tyler, GLMakie\nusing TileProviders\nusing MapTiles\n\n# select a map provider\nprovider = TileProviders.Esri(:WorldImagery)\n# Plot a point on the map\n# point location to add to map\nlat = 34.2013;\nlon = -118.1714;\n# convert to point in web_mercator\npts = Point2f(MapTiles.project((lon,lat), MapTiles.wgs84, MapTiles.web_mercator))\n# set how much area to map in degrees\ndelta = 1;\n# create rectangle for display extents in web_mercator\nframe = Rect2f(lon - delta/2, lat-delta/2, delta, delta)\n# show map\nm = Tyler.Map(frame; provider, figure=Figure(resolution=(1000, 600)))\n# wait for tiles to fully load\nwait(m)\n</code></pre> <p></p> <p>Plot point on map</p> <pre><code>objscatter = scatter!(m.axis, pts; color = :red,\nmarker = '\u2b50', markersize = 50)\n# hide ticks, grid and lables\nhidedecorations!(m.axis)\n# hide frames\nhidespines!(m.axis)\n# Plot a plygon on the map\np1 = (lon-delta/8, lat-delta/8)\np2 = (lon-delta/8, lat+delta/8)\np3 = (lon+delta/8, lat+delta/8)\np4 = (lon+delta/8, lat-delta/8)\n\npolyg = MapTiles.project.([p1, p2, p3, p4], Ref(MapTiles.wgs84), Ref(MapTiles.web_mercator))\npolyg = Point2f.(polyg)\npoly!(polyg; color = :transparent, strokecolor = :black, strokewidth = 5)\n\n# Add text\npts2 = Point2f(MapTiles.project((lon,lat-delta/6), MapTiles.wgs84, MapTiles.web_mercator))\ntext!(pts2, text = \"Basic Example\"; fontsize = 30,\ncolor = :darkblue, align = (:center, :center)\n)\n# show figure\nm\n</code></pre> <p></p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/osmmakie/","title":"OSMMakie integration","text":"<pre><code>using Tyler, GLMakie, OSMMakie, LightOSM, TileProviders\n\narea = (\nminlat = 51.50, minlon = -0.0921, # bottom left corner\nmaxlat = 51.52, maxlon = -0.0662 # top right corner\n)\n\ndownload_osm_network(:bbox; # rectangular area\narea..., # splat previously defined area boundaries\nnetwork_type=:drive, # download motorways\nsave_to_file_location=\"london_drive.json\"\n);\n\nosm = graph_from_file(\"london_drive.json\";\ngraph_type=:light, # SimpleDiGraph\nweight_type=:distance\n)\n\ndownload_osm_buildings(:bbox;\narea...,\nmetadata=true,\ndownload_format=:osm,\nsave_to_file_location=\"london_buildings.osm\"\n);\n</code></pre> <pre><code>[ Info: Overpass server is available for download\n[ Info: Downloaded osm network data from [\"minlat: 51.5\", \"minlon: -0.0921\", \"maxlat: 51.52\", \"maxlon: -0.0662\"] in json format\n[ Info: Saved osm network data to disk: london_drive.json\n[ Info: Created OSMGraph object with kwargs: `network_type=drive`, `weight_type=distance`, `graph_type=light`, `precompute_dijkstra_states=false`, `largest_connected_component=true`\n[ Info: Overpass server is available for download\n[ Info: Downloaded osm buildings data from [\"minlat: 51.5\", \"minlon: -0.0921\", \"maxlat: 51.52\", \"maxlon: -0.0662\"] in osm format\n[ Info: Saved osm buildings data to disk: london_buildings.osm\n</code></pre> <p>load as Buildings Dict</p> <pre><code>buildings = buildings_from_file(\"london_buildings.osm\");\n</code></pre> <p>Google + OSM</p> <pre><code>provider = TileProviders.Google(:satelite)\nlondon = Rect2f(-0.0921, 51.5, 0.04, 0.025)\nm = Tyler.Map(london; provider=provider, coordinate_system=Tyler.wgs84)\nm.axis.aspect = map_aspect(area.minlat, area.maxlat)\np = osmplot!(m.axis, osm; buildings)\nDataInspector(m.axis)\nwait(m)\n</code></pre> <p></p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/providers/","title":"Map Tile providers","text":""},{"location":"examples/generated/UserGuide/providers/#tile-providers","title":"Tile Providers","text":"<pre><code>using Tyler, GLMakie\nusing TileProviders\nusing MapTiles\n</code></pre> <p>Several providers are available (unfortunally is hard to find the ones that work properly). See the following list:</p> <pre><code>providers = TileProviders.list_providers()\n</code></pre> <pre><code>Dict{Function, Vector{Symbol}} with 37 entries:\n  OpenFireMap           =&gt; []\n  AzureMaps             =&gt; [:MicrosoftImagery, :MicrosoftBaseDarkGrey, :Microso\u2026\n  MapTiler              =&gt; [:Streets, :Basic, :Bright, :Pastel, :Positron, :Hyb\u2026\n  NLS                   =&gt; []\n  OneMapSG              =&gt; [:Default, :Night, :Original, :Grey, :LandLot]\n  HEREv3                =&gt; [:normalDay, :normalDayCustom, :normalDayGrey, :norm\u2026\n  Jawg                  =&gt; [:Streets, :Terrain, :Sunny, :Dark, :Light, :Matrix]\n  OPNVKarte             =&gt; []\n  OpenSeaMap            =&gt; []\n  OpenTopoMap           =&gt; []\n  SwissFederalGeoportal =&gt; [:NationalMapColor, :NationalMapGrey, :SWISSIMAGE]\n  OpenWeatherMap        =&gt; [:Clouds, :CloudsClassic, :Precipitation, :Precipita\u2026\n  USGS                  =&gt; [:USTopo, :USImagery, :USImageryTopo]\n  MtbMap                =&gt; []\n  NASAGIBS              =&gt; [:ModisTerraTrueColorCR, :ModisTerraBands367CR, :Vii\u2026\n  OpenSnowMap           =&gt; [:pistes]\n  SafeCast              =&gt; []\n  MapBox                =&gt; []\n  nlmaps                =&gt; [:standaard, :pastel, :grijs, :water, :luchtfoto]\n  \u22ee                     =&gt; \u22ee\n</code></pre> <p>Try and see which ones work, and report back please.</p> <pre><code>##london = Rect2f(-0.0921, 51.5, 0.04, 0.025)\n##ptopo = TileProviders.USGS(:USTopo)\n##pclouds = TileProviders.OpenWeatherMap(:Clouds)\n##pbright = TileProviders.MapTiler(:Bright)\n##ppositron = TileProviders.CartoDB(:Positron)\n##providers = [ptopo, pclouds, pbright, ppositron]\n##m = Tyler.Map(london; provider=ppositron,\n#    figure=Figure(resolution=(600, 600)))\n</code></pre> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/start/","title":"Basic demo","text":""},{"location":"examples/generated/UserGuide/start/#quick-start-into-tyler","title":"Quick start into Tyler","text":""},{"location":"examples/generated/UserGuide/start/#a-basic-request","title":"A basic request","text":"<pre><code>using Tyler, GLMakie\n\nm = Tyler.Map(Rect2f(-0.0921, 51.5, 0.04, 0.025))\n</code></pre> <p>Info</p> <p>London</p> <p>This page was generated using Literate.jl.</p>"},{"location":"examples/generated/UserGuide/whale_ex/","title":"Whale shark trajectory","text":""},{"location":"examples/generated/UserGuide/whale_ex/#whale-shark-exampe-trajectory","title":"Whale shark exampe trajectory","text":""},{"location":"examples/generated/UserGuide/whale_ex/#using-the-full-stack-of-makie-should-just-work","title":"Using the full stack of Makie should just work.","text":"<pre><code>using Tyler, GLMakie\nusing CSV, DataFrames\nusing DataStructures: CircularBuffer\nusing TileProviders\nusing MapTiles\nusing Downloads: download\n\nfunction to_web_mercator(lo,lat)\nreturn Point2f(MapTiles.project((lo,lat), MapTiles.wgs84, MapTiles.web_mercator))\nend\n\nurl = \"https://raw.githubusercontent.com/MakieOrg/Tyler.jl/master/docs/src/assets/data/whale_shark_128786.csv\"\nd = download(url)\nwhale = CSV.read(d, DataFrame)\nlon = whale[!, :lon]\nlat = whale[!, :lat]\nsteps = size(lon,1)\npoints = to_web_mercator.(lon,lat)\n\nlomn, lomx = extrema(lon)\nlamn, lamx = extrema(lat)\n\u03b4lon = abs(lomn - lomx)\n\u03b4lat = abs(lamn - lamx)\n\nprovider = TileProviders.NASAGIBS(:ViirsEarthAtNight2012)\n\nset_theme!(theme_black())\nm = Tyler.Map(Rect2f(Rect2f(lomn - \u03b4lon/2, lamn-\u03b4lat/2, 2\u03b4lon, 2\u03b4lat));\nprovider, figure=Figure(resolution=(1000, 600)))\nwait(m)\n\nnt = 30\ntrail = CircularBuffer{Point2f}(nt)\nfill!(trail, points[1]) # add correct values to the circular buffer\ntrail = Observable(trail) # make it an observable\nwhale = Observable(points[1])\n\nc = to_color(:dodgerblue)\ntrailcolor = [RGBAf(c.r, c.g, c.b, (i/nt)^2.5) for i in 1:nt] # fading tail\n\nobjline = lines!(m.axis, trail; color = trailcolor, linewidth=3)\nobjscatter = scatter!(m.axis, whale; markersize = 15, color = :orangered,\nstrokecolor=:grey90, strokewidth=1)\nhidedecorations!(m.axis)\n#limits!(ax, minimum(lon), maximum(lon), minimum(lat), maximum(lat))\n# the animation is done by updating the Observable values\n# change assets-&gt;(your folder) to make it work in your local env\nrecord(m.figure, joinpath(\"assets\", \"whale_shark_128786.mp4\")) do io\nfor i in 2:steps\npush!(trail[], points[i])\nwhale[] = points[i]\ntrail[] = trail[]\nrecordframe!(io)  # record a new frame\nend\nend\nset_theme!()\n</code></pre> <p>Info</p> <p>Whale shark movements in Gulf of Mexico.   Contact person: Eric Hoffmayer</p> <p></p> <p>This page was generated using Literate.jl.</p>"}]}